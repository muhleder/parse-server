"use strict";

// Apple SignIn Auth
// https://developer.apple.com/documentation/signinwithapplerestapi
const Parse = require('parse/node').Parse;

const httpsRequest = require('./httpsRequest');

const NodeRSA = require('node-rsa');

const jwt = require('jsonwebtoken');

const TOKEN_ISSUER = 'https://appleid.apple.com';
let currentKey;

const getApplePublicKey = async keyId => {
  let data;

  try {
    data = await httpsRequest.get('https://appleid.apple.com/auth/keys');
  } catch (e) {
    if (currentKey) {
      return currentKey;
    }

    throw e;
  }

  const key = data.keys.find(key => key.kid === keyId);

  if (!key) {
    throw Error('Public key with matching key ID to token not found');
  }

  const pubKey = new NodeRSA();
  pubKey.importKey({
    n: Buffer.from(key.n, 'base64'),
    e: Buffer.from(key.e, 'base64')
  }, 'components-public');
  currentKey = pubKey.exportKey(['public']);
  return currentKey;
};

const getKeyAndAlgoFromToken = token => {
  const decodedToken = jwt.decode(token, {
    complete: true
  });

  if (!decodedToken) {
    throw Error('provided token does not decode as JWT');
  }

  const keyId = decodedToken.header.kid;
  const algo = decodedToken.header.alg;
  return {
    keyId,
    algo
  };
};

const verifyIdToken = async ({
  token,
  id
}, clientID) => {
  if (!token) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, 'id token is invalid for this user.');
  }

  const decodedToken = getKeyAndAlgoFromToken(token);
  const applePublicKey = await getApplePublicKey(decodedToken.keyId);
  const jwtClaims = jwt.verify(token, applePublicKey, {
    algorithms: decodedToken.algo
  });

  if (jwtClaims.iss !== TOKEN_ISSUER) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `id token not issued by correct OpenID provider - expected: ${TOKEN_ISSUER} | from: ${jwtClaims.iss}`);
  }

  if (jwtClaims.sub !== id) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `auth data is invalid for this user.`);
  }

  if (clientID !== undefined && jwtClaims.aud !== clientID) {
    throw new Parse.Error(Parse.Error.OBJECT_NOT_FOUND, `jwt aud parameter does not include this client - is: ${jwtClaims.aud} | expected: ${clientID}`);
  }

  return jwtClaims;
}; // Returns a promise that fulfills if this id token is valid


function validateAuthData(authData, options = {}) {
  return verifyIdToken(authData, options.client_id);
} // Returns a promise that fulfills if this app id is valid.


function validateAppId() {
  return Promise.resolve();
}

module.exports = {
  validateAppId,
  validateAuthData
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9BZGFwdGVycy9BdXRoL2FwcGxlLmpzIl0sIm5hbWVzIjpbIlBhcnNlIiwicmVxdWlyZSIsImh0dHBzUmVxdWVzdCIsIk5vZGVSU0EiLCJqd3QiLCJUT0tFTl9JU1NVRVIiLCJjdXJyZW50S2V5IiwiZ2V0QXBwbGVQdWJsaWNLZXkiLCJrZXlJZCIsImRhdGEiLCJnZXQiLCJlIiwia2V5Iiwia2V5cyIsImZpbmQiLCJraWQiLCJFcnJvciIsInB1YktleSIsImltcG9ydEtleSIsIm4iLCJCdWZmZXIiLCJmcm9tIiwiZXhwb3J0S2V5IiwiZ2V0S2V5QW5kQWxnb0Zyb21Ub2tlbiIsInRva2VuIiwiZGVjb2RlZFRva2VuIiwiZGVjb2RlIiwiY29tcGxldGUiLCJoZWFkZXIiLCJhbGdvIiwiYWxnIiwidmVyaWZ5SWRUb2tlbiIsImlkIiwiY2xpZW50SUQiLCJPQkpFQ1RfTk9UX0ZPVU5EIiwiYXBwbGVQdWJsaWNLZXkiLCJqd3RDbGFpbXMiLCJ2ZXJpZnkiLCJhbGdvcml0aG1zIiwiaXNzIiwic3ViIiwidW5kZWZpbmVkIiwiYXVkIiwidmFsaWRhdGVBdXRoRGF0YSIsImF1dGhEYXRhIiwib3B0aW9ucyIsImNsaWVudF9pZCIsInZhbGlkYXRlQXBwSWQiLCJQcm9taXNlIiwicmVzb2x2ZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUVBLE1BQU1BLEtBQUssR0FBR0MsT0FBTyxDQUFDLFlBQUQsQ0FBUCxDQUFzQkQsS0FBcEM7O0FBQ0EsTUFBTUUsWUFBWSxHQUFHRCxPQUFPLENBQUMsZ0JBQUQsQ0FBNUI7O0FBQ0EsTUFBTUUsT0FBTyxHQUFHRixPQUFPLENBQUMsVUFBRCxDQUF2Qjs7QUFDQSxNQUFNRyxHQUFHLEdBQUdILE9BQU8sQ0FBQyxjQUFELENBQW5COztBQUVBLE1BQU1JLFlBQVksR0FBRywyQkFBckI7QUFFQSxJQUFJQyxVQUFKOztBQUVBLE1BQU1DLGlCQUFpQixHQUFHLE1BQU1DLEtB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RUFFSCxxQ0FGRyxDQUFOO0FBSUQ7O0FBQ0QsTUFBSUQsUUFBUSxLQUFLUSxTQUFiLElBQTBCTCxTQUFTLENBQUNNLEdBQVYsS0FBa0JULFFBQWhELEVBQTBEO0FBQ3hELFVBQU0sSUFBSWpDLEtBQUssQ0FBQ2dCLEtBQVYsQ0FDSmhCLEtBQUssQ0FBQ2dCLEtBQU4sQ0FBWWtCLGdCQURSLEVBRUgsd0RBQXVERSxTQUFTLENBQUNNLEdBQUksZ0JBQWVULFFBQVMsRUFGMUYsQ0FBTjtBQUlEOztBQUNELFNBQU9HLFNBQVA7QUFDRCxDQWpDRCxDLENBbUNBOzs7QUFDQSxTQUFTTyxnQkFBVCxDQUEwQkMsUUFBMUIsRUFBb0NDLE9BQU8sR0FBRyxFQUE5QyxFQUFrRDtBQUNoRCxTQUFPZCxhQUFhLENBQUNhLFFBQUQsRUFBV0MsT0FBTyxDQUFDQyxTQUFuQixDQUFwQjtBQUNELEMsQ0FFRDs7O0FBQ0EsU0FBU0MsYUFBVCxHQUF5QjtBQUN2QixTQUFPQyxPQUFPLENBQUNDLE9BQVIsRUFBUDtBQUNEOztBQUVEQyxNQUFNLENBQUNDLE9BQVAsR0FBaUI7QUFDZkosRUFBQUEsYUFEZTtBQUVmSixFQUFBQTtBQUZlLENBQWpCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQXBwbGUgU2lnbkluIEF1dGhcbi8vIGh0dHBzOi8vZGV2ZWxvcGVyLmFwcGxlLmNvbS9kb2N1bWVudGF0aW9uL3NpZ25pbndpdGhhcHBsZXJlc3RhcGlcblxuY29uc3QgUGFyc2UgPSByZXF1aXJlKCdwYXJzZS9ub2RlJykuUGFyc2U7XG5jb25zdCBodHRwc1JlcXVlc3QgPSByZXF1aXJlKCcuL2h0dHBzUmVxdWVzdCcpO1xuY29uc3QgTm9kZVJTQSA9IHJlcXVpcmUoJ25vZGUtcnNhJyk7XG5jb25zdCBqd3QgPSByZXF1aXJlKCdqc29ud2VidG9rZW4nKTtcblxuY29uc3QgVE9LRU5fSVNTVUVSID0gJ2h0dHBzOi8vYXBwbGVpZC5hcHBsZS5jb20nO1xuXG5sZXQgY3VycmVudEtleTtcblxuY29uc3QgZ2V0QXBwbGVQdWJsaWNLZXkgPSBhc3luYyBrZXlJZCA9PiB7XG4gIGxldCBkYXRhO1xuICB0cnkge1xuICAgIGRhdGEgPSBhd2FpdCBodHRwc1JlcXVlc3QuZ2V0KCdodHRwczovL2FwcGxlaWQuYXBwbGUuY29tL2F1dGgva2V5cycpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGN1cnJlbnRLZXkpIHtcbiAgICAgIHJldHVybiBjdXJyZW50S2V5O1xuICAgIH1cbiAgICB0aHJvdyBlO1xuICB9XG5cbiAgY29uc3Qga2V5ID0gZGF0YS5rZXlzLmZpbmQoa2V5ID0+IGtleS5raWQgPT09IGtleUlkKTtcblxuICBpZiAoIWtleSkge1xuICAgIHRocm93IEVycm9yKCdQdWJsaWMga2V5IHdpdGggbWF0Y2hpbmcga2V5IElEIHRvIHRva2VuIG5vdCBmb3VuZCcpO1xuICB9XG5cbiAgY29uc3QgcHViS2V5ID0gbmV3IE5vZGVSU0EoKTtcbiAgcHViS2V5LmltcG9ydEtleShcbiAgICB7IG46IEJ1ZmZlci5mcm9tKGtleS5uLCAnYmFzZTY0JyksIGU6IEJ1ZmZlci5mcm9tKGtleS5lLCAnYmFzZTY0JykgfSxcbiAgICAnY29tcG9uZW50cy1wdWJsaWMnXG4gICk7XG4gIGN1cnJlbnRLZXkgPSBwdWJLZXkuZXhwb3J0S2V5KFsncHVibGljJ10pO1xuICByZXR1cm4gY3VycmVudEtleTtcbn07XG5cbmNvbnN0IGdldEtleUFuZEFsZ29Gcm9tVG9rZW4gPSB0b2tlbiA9PiB7XG4gIGNvbnN0IGRlY29kZWRUb2tlbiA9IGp3dC5kZWNvZGUodG9rZW4sIHsgY29tcGxldGU6IHRydWUgfSk7XG4gIGlmICghZGVjb2RlZFRva2VuKSB7XG4gICAgdGhyb3cgRXJyb3IoJ3Byb3ZpZGVkIHRva2VuIGRvZXMgbm90IGRlY29kZSBhcyBKV1QnKTtcbiAgfVxuICBjb25zdCBrZXlJZCA9IGRlY29kZWRUb2tlbi5oZWFkZXIua2lkO1xuICBjb25zdCBhbGdvID0gZGVjb2RlZFRva2VuLmhlYWRlci5hbGc7XG5cbiAgcmV0dXJuIHsga2V5SWQsIGFsZ28gfTtcbn07XG5cbmNvbnN0IHZlcmlmeUlkVG9rZW4gPSBhc3luYyAoeyB0b2tlbiwgaWQgfSwgY2xpZW50SUQpID0+IHtcbiAgaWYgKCF0b2tlbikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICAnaWQgdG9rZW4gaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLidcbiAgICApO1xuICB9XG5cbiAgY29uc3QgZGVjb2RlZFRva2VuID0gZ2V0S2V5QW5kQWxnb0Zyb21Ub2tlbih0b2tlbik7XG4gIGNvbnN0IGFwcGxlUHVibGljS2V5ID0gYXdhaXQgZ2V0QXBwbGVQdWJsaWNLZXkoZGVjb2RlZFRva2VuLmtleUlkKTtcbiAgY29uc3Qgand0Q2xhaW1zID0gand0LnZlcmlmeSh0b2tlbiwgYXBwbGVQdWJsaWNLZXksIHtcbiAgICBhbGdvcml0aG1zOiBkZWNvZGVkVG9rZW4uYWxnbyxcbiAgfSk7XG5cbiAgaWYgKGp3dENsYWltcy5pc3MgIT09IFRPS0VOX0lTU1VFUikge1xuICAgIHRocm93IG5ldyBQYXJzZS5FcnJvcihcbiAgICAgIFBhcnNlLkVycm9yLk9CSkVDVF9OT1RfRk9VTkQsXG4gICAgICBgaWQgdG9rZW4gbm90IGlzc3VlZCBieSBjb3JyZWN0IE9wZW5JRCBwcm92aWRlciAtIGV4cGVjdGVkOiAke1RPS0VOX0lTU1VFUn0gfCBmcm9tOiAke2p3dENsYWltcy5pc3N9YFxuICAgICk7XG4gIH1cbiAgaWYgKGp3dENsYWltcy5zdWIgIT09IGlkKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgIGBhdXRoIGRhdGEgaXMgaW52YWxpZCBmb3IgdGhpcyB1c2VyLmBcbiAgICApO1xuICB9XG4gIGlmIChjbGllbnRJRCAhPT0gdW5kZWZpbmVkICYmIGp3dENsYWltcy5hdWQgIT09IGNsaWVudElEKSB7XG4gICAgdGhyb3cgbmV3IFBhcnNlLkVycm9yKFxuICAgICAgUGFyc2UuRXJyb3IuT0JKRUNUX05PVF9GT1VORCxcbiAgICAgIGBqd3QgYXVkIHBhcmFtZXRlciBkb2VzIG5vdCBpbmNsdWRlIHRoaXMgY2xpZW50IC0gaXM6ICR7and0Q2xhaW1zLmF1ZH0gfCBleHBlY3RlZDogJHtjbGllbnRJRH1gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gand0Q2xhaW1zO1xufTtcblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZiB0aGlzIGlkIHRva2VuIGlzIHZhbGlkXG5mdW5jdGlvbiB2YWxpZGF0ZUF1dGhEYXRhKGF1dGhEYXRhLCBvcHRpb25zID0ge30pIHtcbiAgcmV0dXJuIHZlcmlmeUlkVG9rZW4oYXV0aERhdGEsIG9wdGlvbnMuY2xpZW50X2lkKTtcbn1cblxuLy8gUmV0dXJucyBhIHByb21pc2UgdGhhdCBmdWxmaWxscyBpZiB0aGlzIGFwcCBpZCBpcyB2YWxpZC5cbmZ1bmN0aW9uIHZhbGlkYXRlQXBwSWQoKSB7XG4gIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHZhbGlkYXRlQXBwSWQsXG4gIHZhbGlkYXRlQXV0aERhdGEsXG59O1xuIl19